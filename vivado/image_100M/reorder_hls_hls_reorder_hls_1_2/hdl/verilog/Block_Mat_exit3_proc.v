// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Block_Mat_exit3_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        bound_y_min,
        bound_y_min_ap_vld,
        bound_y_max,
        bound_y_max_ap_vld,
        rows,
        rows_ap_vld,
        bound_x_max,
        bound_x_max_ap_vld,
        bound_x_min,
        bound_x_min_ap_vld,
        cols,
        cols_ap_vld,
        bound_y_min_out_din,
        bound_y_min_out_full_n,
        bound_y_min_out_write,
        bound_x_min_out_din,
        bound_x_min_out_full_n,
        bound_x_min_out_write,
        img_0_rows_V_out_din,
        img_0_rows_V_out_full_n,
        img_0_rows_V_out_write,
        img_0_cols_V_out_din,
        img_0_cols_V_out_full_n,
        img_0_cols_V_out_write
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] bound_y_min;
input   bound_y_min_ap_vld;
input  [15:0] bound_y_max;
input   bound_y_max_ap_vld;
output  [15:0] rows;
output   rows_ap_vld;
input  [15:0] bound_x_max;
input   bound_x_max_ap_vld;
input  [15:0] bound_x_min;
input   bound_x_min_ap_vld;
output  [15:0] cols;
output   cols_ap_vld;
output  [15:0] bound_y_min_out_din;
input   bound_y_min_out_full_n;
output   bound_y_min_out_write;
output  [15:0] bound_x_min_out_din;
input   bound_x_min_out_full_n;
output   bound_x_min_out_write;
output  [15:0] img_0_rows_V_out_din;
input   img_0_rows_V_out_full_n;
output   img_0_rows_V_out_write;
output  [15:0] img_0_cols_V_out_din;
input   img_0_cols_V_out_full_n;
output   img_0_cols_V_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] rows;
reg rows_ap_vld;
reg[15:0] cols;
reg cols_ap_vld;
reg bound_y_min_out_write;
reg bound_x_min_out_write;
reg img_0_rows_V_out_write;
reg img_0_cols_V_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    bound_y_min_blk_n;
reg    bound_y_max_blk_n;
reg    bound_x_max_blk_n;
reg    bound_x_min_blk_n;
reg    bound_y_min_out_blk_n;
reg    bound_x_min_out_blk_n;
reg    img_0_rows_V_out_blk_n;
reg    img_0_cols_V_out_blk_n;
reg    ap_block_state1;
wire   [15:0] img_0_rows_V_fu_160_p2;
wire   [15:0] img_0_cols_V_fu_174_p2;
reg   [15:0] rows_preg;
reg   [15:0] cols_preg;
wire   [15:0] tmp_6_i_fu_154_p2;
wire   [15:0] tmp_8_i_fu_168_p2;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 rows_preg = 16'd0;
#0 cols_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        cols_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            cols_preg <= img_0_cols_V_fu_174_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        rows_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            rows_preg <= img_0_rows_V_fu_160_p2;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_x_max_blk_n = bound_x_max_ap_vld;
    end else begin
        bound_x_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_x_min_blk_n = bound_x_min_ap_vld;
    end else begin
        bound_x_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_x_min_out_blk_n = bound_x_min_out_full_n;
    end else begin
        bound_x_min_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_x_min_out_write = 1'b1;
    end else begin
        bound_x_min_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_y_max_blk_n = bound_y_max_ap_vld;
    end else begin
        bound_y_max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_y_min_blk_n = bound_y_min_ap_vld;
    end else begin
        bound_y_min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        bound_y_min_out_blk_n = bound_y_min_out_full_n;
    end else begin
        bound_y_min_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        bound_y_min_out_write = 1'b1;
    end else begin
        bound_y_min_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols = img_0_cols_V_fu_174_p2;
    end else begin
        cols = cols_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        cols_ap_vld = 1'b1;
    end else begin
        cols_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        img_0_cols_V_out_blk_n = img_0_cols_V_out_full_n;
    end else begin
        img_0_cols_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_0_cols_V_out_write = 1'b1;
    end else begin
        img_0_cols_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        img_0_rows_V_out_blk_n = img_0_rows_V_out_full_n;
    end else begin
        img_0_rows_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        img_0_rows_V_out_write = 1'b1;
    end else begin
        img_0_rows_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows = img_0_rows_V_fu_160_p2;
    end else begin
        rows = rows_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        rows_ap_vld = 1'b1;
    end else begin
        rows_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (img_0_cols_V_out_full_n == 1'b0) | (img_0_rows_V_out_full_n == 1'b0) | (bound_x_min_out_full_n == 1'b0) | (bound_y_min_out_full_n == 1'b0) | (bound_x_min_ap_vld == 1'b0) | (bound_x_max_ap_vld == 1'b0) | (bound_y_max_ap_vld == 1'b0) | (bound_y_min_ap_vld == 1'b0) | (ap_done_reg == 1'b1));
end

assign bound_x_min_out_din = bound_x_min;

assign bound_y_min_out_din = bound_y_min;

assign img_0_cols_V_fu_174_p2 = (tmp_8_i_fu_168_p2 + 16'd1);

assign img_0_cols_V_out_din = (tmp_8_i_fu_168_p2 + 16'd1);

assign img_0_rows_V_fu_160_p2 = (tmp_6_i_fu_154_p2 + bound_y_max);

assign img_0_rows_V_out_din = (tmp_6_i_fu_154_p2 + bound_y_max);

assign tmp_6_i_fu_154_p2 = (16'd1 - bound_y_min);

assign tmp_8_i_fu_168_p2 = (bound_x_max - bound_x_min);

endmodule //Block_Mat_exit3_proc
