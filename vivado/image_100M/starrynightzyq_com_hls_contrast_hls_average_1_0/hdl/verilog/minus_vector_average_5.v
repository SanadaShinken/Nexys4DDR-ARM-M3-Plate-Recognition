// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module minus_vector_average_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        src_data_stream_V_dout,
        src_data_stream_V_empty_n,
        src_data_stream_V_read,
        normal_dst_V,
        normal_dst_V_ap_vld
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state29 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] src_data_stream_V_dout;
input   src_data_stream_V_empty_n;
output   src_data_stream_V_read;
output  [11:0] normal_dst_V;
output   normal_dst_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg src_data_stream_V_read;
reg[11:0] normal_dst_V;
reg normal_dst_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] mask_4_address0;
reg    mask_4_ce0;
wire   [0:0] mask_4_q0;
reg    src_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [4:0] t_V_1_reg_132;
wire   [0:0] exitcond1_fu_153_p2;
wire    ap_CS_fsm_state2;
wire   [4:0] i_V_fu_159_p2;
reg   [4:0] i_V_reg_354;
wire   [0:0] tmp_6_fu_165_p2;
reg   [0:0] tmp_6_reg_359;
wire   [10:0] r_V_fu_195_p2;
reg   [10:0] r_V_reg_364;
wire   [0:0] exitcond_fu_201_p2;
reg   [0:0] exitcond_reg_369;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
wire    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
wire    ap_block_state16_pp0_stage0_iter13;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
wire    ap_block_state22_pp0_stage0_iter19;
wire    ap_block_state23_pp0_stage0_iter20;
wire    ap_block_state24_pp0_stage0_iter21;
wire    ap_block_state25_pp0_stage0_iter22;
wire    ap_block_state26_pp0_stage0_iter23;
wire    ap_block_state27_pp0_stage0_iter24;
wire    ap_block_state28_pp0_stage0_iter25;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_reg_369_pp0_iter1_reg;
wire   [4:0] j_V_fu_207_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_s_fu_219_p2;
reg   [0:0] tmp_s_reg_378;
reg   [0:0] tmp_s_reg_378_pp0_iter1_reg;
wire   [0:0] or_cond_fu_245_p2;
reg   [0:0] or_cond_reg_389;
reg   [0:0] or_cond_reg_389_pp0_iter1_reg;
reg   [0:0] or_cond_reg_389_pp0_iter2_reg;
reg   [0:0] or_cond_reg_389_pp0_iter3_reg;
reg   [0:0] or_cond_reg_389_pp0_iter4_reg;
reg   [0:0] or_cond_reg_389_pp0_iter5_reg;
reg   [0:0] or_cond_reg_389_pp0_iter6_reg;
reg   [0:0] or_cond_reg_389_pp0_iter7_reg;
reg   [0:0] or_cond_reg_389_pp0_iter8_reg;
reg   [0:0] or_cond_reg_389_pp0_iter9_reg;
reg   [0:0] or_cond_reg_389_pp0_iter10_reg;
reg   [0:0] or_cond_reg_389_pp0_iter11_reg;
reg   [0:0] or_cond_reg_389_pp0_iter12_reg;
reg   [0:0] or_cond_reg_389_pp0_iter13_reg;
reg   [0:0] or_cond_reg_389_pp0_iter14_reg;
reg   [0:0] or_cond_reg_389_pp0_iter15_reg;
reg   [0:0] or_cond_reg_389_pp0_iter16_reg;
reg   [0:0] or_cond_reg_389_pp0_iter17_reg;
reg   [0:0] or_cond_reg_389_pp0_iter18_reg;
reg   [0:0] or_cond_reg_389_pp0_iter19_reg;
reg   [0:0] or_cond_reg_389_pp0_iter20_reg;
reg   [0:0] or_cond_reg_389_pp0_iter21_reg;
reg   [0:0] or_cond_reg_389_pp0_iter22_reg;
reg   [0:0] or_cond_reg_389_pp0_iter23_reg;
reg   [0:0] or_cond_reg_389_pp0_iter24_reg;
wire   [0:0] tmp_2_fu_250_p2;
reg   [0:0] tmp_2_reg_393;
reg   [0:0] mask_4_load_reg_398;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg   [4:0] t_V_reg_120;
reg    ap_block_state1;
wire    ap_CS_fsm_state29;
wire  signed [63:0] sum_cast_fu_234_p1;
reg   [9:0] p_1_fu_86;
wire   [9:0] p_0289_2_fu_296_p3;
reg   [9:0] p_s_fu_90;
wire   [9:0] p_0255_2_fu_289_p3;
wire   [11:0] tmp_26_fu_331_p1;
reg   [11:0] normal_dst_V_preg;
reg    ap_block_pp0_stage0_01001;
wire   [9:0] p_shl_fu_171_p3;
wire   [6:0] p_shl2_fu_183_p3;
wire   [10:0] p_shl_cast_fu_179_p1;
wire   [10:0] p_shl2_cast_fu_191_p1;
wire   [4:0] tmp_9_fu_213_p2;
wire   [10:0] tmp_3_cast_fu_225_p1;
wire   [10:0] sum_fu_229_p2;
wire   [0:0] tmp_11_fu_239_p2;
wire   [0:0] tmp_fu_262_p2;
wire   [9:0] tmp_7_fu_266_p2;
wire   [9:0] tmp_8_fu_280_p1;
wire   [9:0] diff_sum_t_V_fu_272_p3;
wire   [9:0] template_sum_V_fu_283_p2;
wire   [19:0] grp_fu_315_p0;
wire   [9:0] grp_fu_315_p1;
wire   [11:0] grp_fu_315_p2;
reg    grp_fu_315_ce;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [19:0] grp_fu_315_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 normal_dst_V_preg = 12'd0;
end

minus_vector_averg8j #(
    .DataWidth( 1 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
mask_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_4_address0),
    .ce0(mask_4_ce0),
    .q0(mask_4_q0)
);

contrast_hls_avercud #(
    .ID( 1 ),
    .NUM_STAGE( 24 ),
    .din0_WIDTH( 20 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 12 ))
contrast_hls_avercud_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_315_p0),
    .din1(grp_fu_315_p1),
    .ce(grp_fu_315_ce),
    .dout(grp_fu_315_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((exitcond1_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond1_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end else if (((exitcond1_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter25 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        normal_dst_V_preg <= 12'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter25 == 1'b1) & (or_cond_reg_389_pp0_iter24_reg == 1'd1))) begin
            normal_dst_V_preg <= tmp_26_fu_331_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_369_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_1_fu_86 <= p_0289_2_fu_296_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_1_fu_86 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_369_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_s_fu_90 <= p_0255_2_fu_289_p3;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        p_s_fu_90 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        t_V_1_reg_132 <= j_V_fu_207_p2;
    end else if (((exitcond1_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        t_V_1_reg_132 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        t_V_reg_120 <= i_V_reg_354;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_120 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_369 <= exitcond_fu_201_p2;
        exitcond_reg_369_pp0_iter1_reg <= exitcond_reg_369;
        mask_4_load_reg_398 <= mask_4_q0;
        or_cond_reg_389_pp0_iter1_reg <= or_cond_reg_389;
        tmp_s_reg_378_pp0_iter1_reg <= tmp_s_reg_378;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_354 <= i_V_fu_159_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        or_cond_reg_389 <= or_cond_fu_245_p2;
        tmp_s_reg_378 <= tmp_s_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        or_cond_reg_389_pp0_iter10_reg <= or_cond_reg_389_pp0_iter9_reg;
        or_cond_reg_389_pp0_iter11_reg <= or_cond_reg_389_pp0_iter10_reg;
        or_cond_reg_389_pp0_iter12_reg <= or_cond_reg_389_pp0_iter11_reg;
        or_cond_reg_389_pp0_iter13_reg <= or_cond_reg_389_pp0_iter12_reg;
        or_cond_reg_389_pp0_iter14_reg <= or_cond_reg_389_pp0_iter13_reg;
        or_cond_reg_389_pp0_iter15_reg <= or_cond_reg_389_pp0_iter14_reg;
        or_cond_reg_389_pp0_iter16_reg <= or_cond_reg_389_pp0_iter15_reg;
        or_cond_reg_389_pp0_iter17_reg <= or_cond_reg_389_pp0_iter16_reg;
        or_cond_reg_389_pp0_iter18_reg <= or_cond_reg_389_pp0_iter17_reg;
        or_cond_reg_389_pp0_iter19_reg <= or_cond_reg_389_pp0_iter18_reg;
        or_cond_reg_389_pp0_iter20_reg <= or_cond_reg_389_pp0_iter19_reg;
        or_cond_reg_389_pp0_iter21_reg <= or_cond_reg_389_pp0_iter20_reg;
        or_cond_reg_389_pp0_iter22_reg <= or_cond_reg_389_pp0_iter21_reg;
        or_cond_reg_389_pp0_iter23_reg <= or_cond_reg_389_pp0_iter22_reg;
        or_cond_reg_389_pp0_iter24_reg <= or_cond_reg_389_pp0_iter23_reg;
        or_cond_reg_389_pp0_iter2_reg <= or_cond_reg_389_pp0_iter1_reg;
        or_cond_reg_389_pp0_iter3_reg <= or_cond_reg_389_pp0_iter2_reg;
        or_cond_reg_389_pp0_iter4_reg <= or_cond_reg_389_pp0_iter3_reg;
        or_cond_reg_389_pp0_iter5_reg <= or_cond_reg_389_pp0_iter4_reg;
        or_cond_reg_389_pp0_iter6_reg <= or_cond_reg_389_pp0_iter5_reg;
        or_cond_reg_389_pp0_iter7_reg <= or_cond_reg_389_pp0_iter6_reg;
        or_cond_reg_389_pp0_iter8_reg <= or_cond_reg_389_pp0_iter7_reg;
        or_cond_reg_389_pp0_iter9_reg <= or_cond_reg_389_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_153_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_V_reg_364[10 : 2] <= r_V_fu_195_p2[10 : 2];
        tmp_6_reg_359 <= tmp_6_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_s_reg_378 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_2_reg_393 <= tmp_2_fu_250_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_201_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond1_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_315_ce = 1'b1;
    end else begin
        grp_fu_315_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mask_4_ce0 = 1'b1;
    end else begin
        mask_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter25 == 1'b1) & (or_cond_reg_389_pp0_iter24_reg == 1'd1))) begin
        normal_dst_V = tmp_26_fu_331_p1;
    end else begin
        normal_dst_V = normal_dst_V_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter25 == 1'b1) & (or_cond_reg_389_pp0_iter24_reg == 1'd1))) begin
        normal_dst_V_ap_vld = 1'b1;
    end else begin
        normal_dst_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        src_data_stream_V_blk_n = src_data_stream_V_empty_n;
    end else begin
        src_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        src_data_stream_V_read = 1'b1;
    end else begin
        src_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond1_fu_153_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_fu_201_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter24 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter25 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter24 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter25 == 1'b1)) | ((exitcond_fu_201_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((src_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = (src_data_stream_V_empty_n == 1'b0);
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign diff_sum_t_V_fu_272_p3 = ((tmp_fu_262_p2[0:0] === 1'b1) ? tmp_7_fu_266_p2 : p_s_fu_90);

assign exitcond1_fu_153_p2 = ((t_V_reg_120 == 5'd28) ? 1'b1 : 1'b0);

assign exitcond_fu_201_p2 = ((t_V_1_reg_132 == 5'd28) ? 1'b1 : 1'b0);

assign grp_fu_315_p0 = {{p_0255_2_fu_289_p3}, {10'd0}};

assign grp_fu_315_p1 = grp_fu_315_p10;

assign grp_fu_315_p10 = p_0289_2_fu_296_p3;

assign i_V_fu_159_p2 = (t_V_reg_120 + 5'd1);

assign j_V_fu_207_p2 = (t_V_1_reg_132 + 5'd1);

assign mask_4_address0 = sum_cast_fu_234_p1;

assign or_cond_fu_245_p2 = (tmp_6_reg_359 & tmp_11_fu_239_p2);

assign p_0255_2_fu_289_p3 = ((tmp_s_reg_378_pp0_iter1_reg[0:0] === 1'b1) ? 10'd0 : diff_sum_t_V_fu_272_p3);

assign p_0289_2_fu_296_p3 = ((tmp_s_reg_378_pp0_iter1_reg[0:0] === 1'b1) ? 10'd0 : template_sum_V_fu_283_p2);

assign p_shl2_cast_fu_191_p1 = p_shl2_fu_183_p3;

assign p_shl2_fu_183_p3 = {{t_V_reg_120}, {2'd0}};

assign p_shl_cast_fu_179_p1 = p_shl_fu_171_p3;

assign p_shl_fu_171_p3 = {{t_V_reg_120}, {5'd0}};

assign r_V_fu_195_p2 = (p_shl_cast_fu_179_p1 - p_shl2_cast_fu_191_p1);

assign sum_cast_fu_234_p1 = $signed(sum_fu_229_p2);

assign sum_fu_229_p2 = (r_V_reg_364 + tmp_3_cast_fu_225_p1);

assign template_sum_V_fu_283_p2 = (p_1_fu_86 + tmp_8_fu_280_p1);

assign tmp_11_fu_239_p2 = ((t_V_1_reg_132 == 5'd27) ? 1'b1 : 1'b0);

assign tmp_26_fu_331_p1 = grp_fu_315_p2[11:0];

assign tmp_2_fu_250_p2 = ((src_data_stream_V_dout != 8'd0) ? 1'b1 : 1'b0);

assign tmp_3_cast_fu_225_p1 = t_V_1_reg_132;

assign tmp_6_fu_165_p2 = ((t_V_reg_120 == 5'd27) ? 1'b1 : 1'b0);

assign tmp_7_fu_266_p2 = (p_s_fu_90 + 10'd1);

assign tmp_8_fu_280_p1 = mask_4_load_reg_398;

assign tmp_9_fu_213_p2 = (t_V_reg_120 | t_V_1_reg_132);

assign tmp_fu_262_p2 = (tmp_2_reg_393 ^ mask_4_load_reg_398);

assign tmp_s_fu_219_p2 = ((tmp_9_fu_213_p2 == 5'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    r_V_reg_364[1:0] <= 2'b00;
end

endmodule //minus_vector_average_5
